# TODO: Change the name of the org 
org: web081
app: sls-todo-app
service: sls-todo-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing
  - serverless-reqvalidator-plugin
  - serverless-plugin-canary-deployments
  - serverless-aws-documentation

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}
  # Use these variables in the functions and resouorces section below. For example, 
  # ${self:provider.environment.TODOS_S3_BUCKET}
  environment:
    TODOS_NAME: sls-todo
    TODOS_TABLE: Todos-${self:provider.stage}
    TODOS_CREATED_AT_INDEX: CreatedAtIndex   
    TODOS_S3_BUCKET: sls-todo-${self:provider.stage}
    #SIGNED_URL_EXPIRATION: 300

  

  tracing:
    lambda: true
    apiGateway: true
  iam:role:statements:
       - Effect: Allow
         Action:
           - xray:PutTelemetryRecords
           - xray:PutTraceSegments
         Resource: 
            "*"
        
custom:
  topicName: imagesTopic-${self:provider.stage}

  #serverless-offline:
   # port: 3003

  #dynamodb:
   # start:
    #  port: 8000
     # inMemory: true
     # migrate: true

  documentation:
    api:
      info:
        version: v1.0.0
        title: sls-todo
        description: sls-todo 
    models:
      - name: CreateTodoRequest
        contentType: application/json
        schema: ${file(models/create-Todo-model.json)}
      - name: UpdateTodoRequest
        contentType: application/json
        schema: ${file(models/update-todo-model.json)}

functions:

  
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  # TODO: Configure this function - 
  # Provide iamRoleStatements property for performing Actions on DynamoDB
  GetTodos:
    handler: src/lambda/http/getTodos.handler
    events:
      - http:
          method: get
          path: todos
          cors: true
    iamRoleStatementsName: ${self:provider.environment.TODOS_NAME}-get-todos-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:GetItem
          - dynamodb:Query       
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}/index/${self:provider.environment.TODOS_CREATED_AT_INDEX} 
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - '*'
        #  - dynamodb:UpdateItem
        #  - dynamodb:PutItem
       # Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_CREATED_AT_INDEX}     

  # TODO: Configure this function - 
  # Provide iamRoleStatements property. Decide the Actions and AWS Resource. 
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below. 
  CreateTodo:
    handler: src/lambda/http/createTodo.handler
    events:
      - http:
          method: post
          path: todos
          cors: true
          authorizer: Auth          
          documentation:
            summary: Create a new Todos item
            description: Create a new Todos item
            requestModels:
              'application/json': CreateTodoRequest
          reqValidatorName: RequestBodyValidator
    iamRoleStatementsName: ${self:provider.environment.TODOS_NAME}-create-todos-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*' 
    #deploymentSettings:
     # type: Linear10PercentEvery1Minute
      #alias: Live
  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
  UpdateTodo:
    handler: src/lambda/http/updateTodo.handler
    events:
      - http:
          method: patch
          path: todos/{todoId}
          CORS: true
          Authorizer: Auth
          documentation:
            summary: new Todo Update
            description:  new Todo Update
            requestModels:
              'application/json': UpdateTodoRequest
          reqValidatorName: RequestBodyValidator
    iamRoleStatementsName: ${self:provider.environment.TODOS_NAME}-update-todos-role-${self:provider.stage}     
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'
  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  DeleteTodo:
    handler: src/lambda/http/deleteTodo.handler
    events:
      - http:
          method: delete
          path: todos/{todoId}
          cors: true
          Authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.TODOS_NAME}-delete-todos-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: 
          - '*'
  # TODO: Configure this function
  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: todos/{todoId}/attachment
          cors: true
         # reqValidatorName: RequestBodyValidator
          authorizer: Auth
    iamRoleStatementsName: ${self:provider.environment.TODOS_NAME}-s3-upload-role-${self:provider.stage}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:*
          - xray:PutTraceSegments
        Resource: arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*
     # - Effect: Allow
     #   Action:
     #     -  dynamodb:UpdateItem
     #   Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TODOS_TABLE}
  
  


resources:
  Resources:     
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,DELETE,PATCH,PUT'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    TodosTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: todoId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: todoId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TODOS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.TODOS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    # TODO: Complete the bucket properties below. 
    # Do not forget to add the CorsConfiguration propoerty
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.TODOS_S3_BUCKET}      
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    RequestBodyValidator:
        Type: AWS::ApiGateway::RequestValidator
        Properties:
          Name: 'request-body-validator'
          RestApiId:
            Ref: ApiGatewayRestApi
          ValidateRequestBody: true
          ValidateRequestParameters: false

    

    # TODO: Complete the policy below and attach it to the bucket defined above
    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.TODOS_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket